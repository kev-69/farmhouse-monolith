// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  password    String
  firstName   String
  lastName    String
  role        String
  isVerified  Boolean
  orders      Order[]
  addresses   UserAddress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserAddress {
  id          String    @id @default(uuid())
  street      String
  city        String
  state       String
  zipCode     String  
  country     String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id            String   @id @default(uuid())
  name          String
  price         Float
  description   String?
  stockQuantity Int
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  orders        Order[]  @relation("ProductOrder")
  shopId        String
  shop          Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  productImages String[]
  orderItems    OrderItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  products    Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  totalAmount   Float
  orderStatus   OrderStatus
  payments      Payment[]
  products      Product[]   @relation("ProductOrder")
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
}

model Payment {
  id        String @id @default(uuid())
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id])
  amount    Float
  method    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id          String     @id @default(uuid())
  name        String     @unique
  ownerName   String
  email       String     @unique
  password    String
  location    String
  phoneNumber String
  role        String
  isVerified  Boolean
  categories  Category[]
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
