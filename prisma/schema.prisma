// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Admin {
  id          String  @id @default(uuid())
  email       String  @unique
  password    String
  role        Role  @default(ADMIN)
  createdAt   DateTime  @default(now())
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        Role  @default(USER)
  isVerified  Boolean
  orders      Order[]
  addresses   UserAddress[]
  carts       Cart[]
  wishlists   Wishlist[]
  verificationTokens  VerificationToken[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  SHOP
  USER
}

model UserAddress {
  id          String    @id @default(uuid())
  street      String
  city        String
  state       String
  zipCode     String  
  country     String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id            String   @id @default(uuid())
  name          String
  price         Float
  description   String?
  stockQuantity Int
  categoryId    String
  inStock       Boolean
  category      Category @relation(fields: [categoryId], references: [id])
  isDeleted     Boolean  @default(false)
  orders        Order[]  @relation("ProductOrder")
  shopId        String
  shop          Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  productImages String[]
  orderItems    OrderItem[]
  wishlistItems Wishlist[]
  cartItems     CartItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  products    Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id          String  @id  @default(uuid())
  userId      String
  productId   String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([userId, productId])
}

model Cart {
  id          String  @id   @default(uuid())
  userId      String?
  sessionId   String? @unique
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id            String   @id  @default(uuid())
  cartId        String
  productId     String
  quantity      Int     @default(1)
  cart          Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product @relation(fields: [productId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([cartId, productId])
}

enum OrderStatus {
  PROCESSING
  COMPLETED
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  totalAmount   Float
  orderStatus   OrderStatus
  payments      Payment[]
  products      Product[]   @relation("ProductOrder")
  orderItems    OrderItem[]
  shippingAddress Json?
  shippedAt       DateTime?
  shippedBy       String?       // Shop ID that shipped it
  deliveredAt     DateTime?
  cancelledAt     DateTime?
  cancellationReason String?
  trackingNumber  String?
  carrier         String?
  history         OrderHistory[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderHistory {
  id          String  @id @default(uuid())
  orderId     String
  status      OrderStatus
  note        String?
  createdBy   String?
  createdAt   DateTime    @default(now())
  order       Order     @relation(fields: [orderId], references: [id])
}

enum FulfillmentStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])
  quantity    Int
  price       Float
  fulfillmentStatus FulfillmentStatus  @default(PENDING)
  statusUpdatedAt   DateTime?
  statusUpdatedBy   String?            // Shop owner who updated the status
  trackingNumber    String?            // Allow each shop to add their own tracking
  carrierName       String?            // Allow each shop to specify their carrier
  notes             String?            // Shop notes about this specific item
}

model Payment {
  id        String @id @default(uuid())
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id])
  amount    Float
  method    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id          String     @id @default(uuid())
  name        String     @unique
  ownerName   String
  email       String     @unique
  password    String
  description String
  location    String
  profileImage  String?
  phoneNumber String
  role        Role  @default(SHOP)
  isVerified  Boolean
  isApproved  Boolean
  isBanned    Boolean   @default(false)
  categories  Category[]
  products    Product[]
  orderItems  OrderItem[]
  shopVerificationTokens  ShopVerificationToken[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ShopVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}